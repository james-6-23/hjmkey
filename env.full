# ====================================
# Hajimi King 完整配置文件
# ====================================
# 此文件包含所有可用配置选项的详细说明
# 复制此文件为 .env 并根据需要修改配置
# ====================================

# ====================================
# 🔴 核心必填配置
# ====================================

# GitHub访问令牌（必填）
# 多个token用逗号分隔，或在 data/github_tokens.txt 中配置（每行一个）
# 获取方式：https://github.com/settings/tokens (需要 public_repo 权限)
GITHUB_TOKENS=ghp_your_token_here_1,ghp_your_token_here_2,ghp_your_token_here_3

# ====================================
# 🟡 重要配置（建议配置）
# ==================================== 

# 代理配置（推荐使用，避免IP被封）
# 支持多个代理（逗号分隔）和账密认证
# 格式：http://user:pass@proxy:port 或 http://proxy:port
# 推荐方案：https://github.com/cmj2002/warp-docker
PROXY=http://localhost:1080

# 数据存储目录路径
# 所有数据文件（密钥、日志等）将存储在此目录下
DATA_PATH=/app/data

# 仓库年龄过滤（天数）
# 只扫描指定天数内更新的仓库，减少无效搜索
# 建议值：365（1年）到 1460（4年）
DATE_RANGE_DAYS=730

# 搜索查询配置文件路径
# 查询表达式是搜索效率的关键，需要发挥想象力
# 文件格式：每行一个查询语句，支持GitHub搜索语法
QUERIES_FILE=queries.txt

# 用于验证key有效性的Gemini模型
# 可选：gemini-2.5-flash, gemini-1.5-flash, gemini-pro
HAJIMI_CHECK_MODEL=gemini-2.5-flash

# ====================================
# 🔗 外部同步配置
# ====================================

# --- Gemini Balancer 同步配置 ---
# 项目地址：https://github.com/snailyp/gemini-balance
GEMINI_BALANCER_SYNC_ENABLED=false
GEMINI_BALANCER_URL=
GEMINI_BALANCER_AUTH=

# --- GPT Load Balancer 同步配置 ---
# 项目地址：https://github.com/tbphp/gpt-load
# 说明：有效密钥和429限流密钥都会被同步
GPT_LOAD_SYNC_ENABLED=false
GPT_LOAD_URL=
GPT_LOAD_AUTH=
# 支持多个组，用逗号分隔（传统模式使用）
GPT_LOAD_GROUP_NAME=production,staging,development

# --- GPT Load 智能分组配置（新功能）---
# 启用智能分组同步（根据密钥类型自动分配到不同组）
GPT_LOAD_SMART_GROUP_ENABLED=false

# 各类型密钥对应的组名配置
# 有效密钥组（包含所有验证通过的密钥）
GPT_LOAD_GROUP_VALID=production

# 429限流密钥专属组（可能是有效的）
GPT_LOAD_GROUP_429=rate_limited

# 付费版密钥专属组
GPT_LOAD_GROUP_PAID=paid

# 免费版密钥专属组
GPT_LOAD_GROUP_FREE=free

# 是否将429密钥也发送到valid组（双重保险）
GPT_LOAD_429_TO_VALID=true

# 是否将付费密钥也发送到valid组（确保可用性）
GPT_LOAD_PAID_TO_VALID=true

# ====================================
# 🟢 高级配置（保持默认即可）
# ====================================

# --- 文件命名配置 ---
# 有效密钥文件前缀
VALID_KEY_PREFIX=keys/keys_valid_

# 限流密钥文件前缀（429状态，可能是有效的）
RATE_LIMITED_KEY_PREFIX=keys/key_429_

# 付费版密钥文件前缀（新功能）
PAID_KEY_PREFIX=keys/keys_paid_

# 免费版密钥文件前缀（新功能）
FREE_KEY_PREFIX=keys/keys_free_

# 发送到外部应用的密钥文件前缀
KEYS_SEND_PREFIX=keys/keys_send_

# --- 日志配置 ---
# 有效密钥详细日志前缀
VALID_KEY_DETAIL_PREFIX=logs/keys_valid_detail_

# 限流密钥详细日志前缀
RATE_LIMITED_KEY_DETAIL_PREFIX=logs/key_429_detail_

# 发送结果详细日志前缀
KEYS_SEND_DETAIL_PREFIX=logs/keys_send_detail_

# --- 扫描配置 ---
# 已扫描文件SHA记录
SCANNED_SHAS_FILE=scanned_shas.txt

# 文件路径黑名单（逗号分隔）
# 过滤掉文档、示例、测试等无效文件
FILE_PATH_BLACKLIST=readme,docs,doc/,.md,example,sample,tutorial,test,spec,demo,mock,documentation,guide,manual

# --- 搜索性能配置 ---
# 最大并发搜索数
# 控制同时进行的GitHub搜索请求数量
MAX_CONCURRENT_SEARCHES=5

# 最大并发验证数
# 控制同时进行的密钥验证请求数量
MAX_CONCURRENT_VALIDATIONS=10

# 搜索请求间隔（秒）
# 避免请求过于频繁导致被限流
SEARCH_DELAY=1

# 批量发送间隔（秒）
# 控制向外部服务发送密钥的频率
BATCH_SEND_INTERVAL=60

# --- Token管理配置（新功能）---
# GitHub Token文件路径（可选，优先级高于GITHUB_TOKENS）
GITHUB_TOKENS_FILE=data/github_tokens.txt

# Token轮换策略
# 可选：round_robin（轮询）, random（随机）, least_used（最少使用）
TOKEN_ROTATION_STRATEGY=round_robin

# Token额度检查间隔（秒）
TOKEN_CHECK_INTERVAL=300

# ====================================
# 🧩 模块化功能配置
# ====================================

# --- 异步批量验证模块 ---
# 启用异步批量验证功能（10倍性能提升）
ENABLE_ASYNC_VALIDATION=true
# 最大并发验证数（建议值：20-100）
MAX_CONCURRENT_VALIDATIONS=50
# 批量验证大小（建议值：50-200）
VALIDATION_BATCH_SIZE=100
# 验证超时时间（秒）
VALIDATION_TIMEOUT=30
# 验证重试次数
VALIDATION_RETRIES=3

# --- 进度显示模块 ---
# 启用进度显示功能
ENABLE_PROGRESS_DISPLAY=true
# 进度更新间隔（秒）
PROGRESS_UPDATE_INTERVAL=0.1
# 默认进度样式（bar/spinner/percentage/eta）
DEFAULT_PROGRESS_STYLE=bar
# 进度条宽度（字符数）
PROGRESS_BAR_WIDTH=50

# --- 结构化日志模块 ---
# 启用结构化日志功能
ENABLE_STRUCTURED_LOGGING=true
# 默认日志格式（json/xml/yaml/text）
DEFAULT_LOG_FORMAT=json
# 日志级别（DEBUG/INFO/WARNING/ERROR/CRITICAL）
LOG_LEVEL=INFO
# 日志文件路径
LOG_FILE=logs/app.log
# 是否记录到文件
LOG_TO_FILE=true
# 是否记录到控制台
LOG_TO_CONSOLE=true
# 最大日志文件大小（字节）
MAX_LOG_SIZE=10485760
# 日志文件备份数量
BACKUP_COUNT=5

# --- 连接池优化模块 ---
# 启用连接池优化功能（50%网络性能提升）
ENABLE_CONNECTION_POOL=true
# 最大连接数
MAX_CONNECTIONS=100
# 连接超时时间（秒）
CONNECTION_TIMEOUT=30
# 获取连接超时时间（秒）
ACQUIRE_TIMEOUT=10
# 连接保持活动时间（秒）
KEEPALIVE_TIMEOUT=30
# 每主机最大连接数
LIMIT_PER_HOST=10
# DNS缓存TTL（秒）
DNS_TTL=300
# 连接重试次数
CONNECTION_RETRIES=3
# 连接重试延迟（秒）
CONNECTION_RETRY_DELAY=1.0

# --- 数据库支持模块 ---
# 启用数据库支持功能
ENABLE_DATABASE=true
# 数据库类型（sqlite/postgresql/mysql）
DATABASE_TYPE=sqlite
# 数据库名称/路径
DATABASE_NAME=data/app.db
# 数据库主机
DATABASE_HOST=localhost
# 数据库端口
DATABASE_PORT=5432
# 数据库用户名
DATABASE_USERNAME=user
# 数据库密码
DATABASE_PASSWORD=
# 数据库连接字符串（可选，优先级高于其他配置）
DATABASE_CONNECTION_STRING=
# 数据库连接池大小
DATABASE_POOL_SIZE=10
# 数据库超时时间（秒）
DATABASE_TIMEOUT=30

# --- 插件系统模块 ---
# 启用插件系统功能
ENABLE_PLUGINS=true
# 插件目录
PLUGIN_DIRECTORY=plugins
# 启用热重载
PLUGIN_HOT_RELOAD=true
# 热重载检查间隔（秒）
PLUGIN_HOT_RELOAD_INTERVAL=5

# --- 监控告警模块 ---
# 启用监控告警功能
ENABLE_MONITORING=true
# 监控功能启用
MONITORING_ENABLED=true
# 指标导出间隔（秒）
METRICS_EXPORT_INTERVAL=60
# 告警检查间隔（秒）
ALERT_CHECK_INTERVAL=30
# 错误率阈值（0.0-1.0）
ERROR_RATE_THRESHOLD=0.1
# 错误率统计窗口（分钟）
ERROR_RATE_WINDOW=5
# 延迟阈值（秒）
LATENCY_THRESHOLD=5.0

# ====================================
# 📝 使用说明
# ====================================
# 1. 必须配置 GITHUB_TOKENS 或在 data/github_tokens.txt 中配置
# 2. 强烈建议配置 PROXY 避免IP被封
# 3. GPT_LOAD 和 GEMINI_BALANCER 可选配置
# 4. 429限流的密钥也会被保存和同步（很可能是有效的）
# 5. 付费版密钥会在程序退出时自动识别并分类保存
# 6. 智能分组功能可自动将不同类型密钥分配到专属组
# ====================================
#
# 🤖 智能分组说明：
# - 启用后，系统会自动识别密钥类型并分配到对应组
# - 429密钥 → rate_limited组（专门处理限流密钥）
# - 付费密钥 → paid组（优先级最高）
# - 免费密钥 → free组（普通优先级）
# - 可配置是否将特殊密钥也同步到主组（双重保险）
# ====================================

# ====================================
# 🔍 查询配置示例 (queries.txt)
# ====================================
# AIzaSy in:file
# AIzaSy in:file extension:json
# AIzaSy in:file extension:env
# gemini api key in:file
# GEMINI_API_KEY in:file
# google ai api in:file
# generativeai in:file extension:py
# ====================================