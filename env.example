# ============================================================
# HAJIMI KING V2.0 - 配置文件模板
# ============================================================
# 复制此文件为 .env 并填入您的配置值
# cp env.example .env
# ============================================================

# ============================================================
# 核心设置
# ============================================================

# 运行环境模式 - 控制系统整体行为
# 可选值: development（开发模式，更多日志和调试功能）或 production（生产模式，性能优化）
# 示例: ENVIRONMENT=development
ENVIRONMENT=development

# 数据存储根目录
# 所有找到的密钥、日志和报告都将保存在此目录下
# 示例: DATA_ROOT=./data 或 DATA_ROOT=/home/user/hajimi_data
DATA_ROOT=./data

# 调试模式开关
# 启用后显示详细错误信息和调试日志，排查问题时设为 true
# 示例: DEBUG=true 或 DEBUG=false
DEBUG=false

# ============================================================
# GitHub API 配置
# ============================================================

# GitHub 个人访问令牌，用于搜索仓库
# 多个令牌用英文逗号分隔，可提高速率限制
# 获取地址: https://github.com/settings/tokens（需要 'public_repo' 权限）
# 格式: github_pat_xxxxx,github_pat_yyyyy,github_pat_zzzzz
# 示例: GITHUB_TOKENS=ghp_abcd1234,ghp_efgh5678
GITHUB_TOKENS=

# 备选方案：从文件加载令牌（每行一个令牌）
# 推荐用于安全管理多个令牌
# 示例: GITHUB_TOKENS_FILE=data/github_tokens.txt
GITHUB_TOKENS_FILE=data/github_tokens.txt

# 令牌轮换策略，用于分配 API 请求
# 可选值: 
#   - ROUND_ROBIN（轮询）：依次循环使用每个令牌
#   - LEAST_USED（最少使用）：选择使用次数最少的令牌
#   - BEST_QUOTA（最佳配额）：选择剩余配额最多的令牌
#   - HEALTH_SCORE（健康评分）：根据成功率选择
#   - ADAPTIVE（自适应）：智能选择最优令牌
# 示例: TOKEN_POOL_STRATEGY=ADAPTIVE
TOKEN_POOL_STRATEGY=ADAPTIVE

# GitHub API 每秒最大请求数
# 较低的值可防止速率限制但会降低搜索速度
# 建议值: 5-30，取决于令牌数量
# 示例: GITHUB_QPS_MAX=30
GITHUB_QPS_MAX=30  # 增加到30（17个token可以支持更高QPS）

# 失败页面请求的重试次数
# 示例: GITHUB_PAGE_RETRY_MAX=3
GITHUB_PAGE_RETRY_MAX=3

# 数据丢失阈值
# 当数据丢失超过此百分比时触发重新扫描（0.2 = 20%）
# 示例: DATA_LOSS_THRESHOLD=0.2
DATA_LOSS_THRESHOLD=0.2

# ============================================================
# 搜索配置
# ============================================================

# 搜索查询文件路径
# 包含 GitHub 搜索查询（每行一个）用于查找 API 密钥
# 示例: QUERIES_FILE=queries.txt 或 QUERIES_FILE=config/search_queries.txt
QUERIES_FILE=queries.txt

# 仓库更新时间过滤（天数）
# 仅搜索在指定天数内更新的仓库，减少搜索范围
# 示例: DATE_RANGE_DAYS=365（搜索一年内更新的仓库）
DATE_RANGE_DAYS=730

# 文件路径黑名单
# 排除文档和示例文件，这些文件通常包含假密钥
# 格式: 逗号分隔的关键词列表
# 示例: FILE_PATH_BLACKLIST=readme,docs,example,test
FILE_PATH_BLACKLIST=readme,docs,doc/,.md,example,sample,tutorial,test,spec,demo,mock,documentation,guide,manual

# 最大搜索循环次数
# 设置为数字限制循环次数，设置为 null 表示无限循环
# 示例: MAX_LOOPS=1 或 MAX_LOOPS=null
MAX_LOOPS=1

# 搜索循环之间的延迟（秒）
# 示例: LOOP_DELAY=10
LOOP_DELAY=10

# ============================================================
# Gemini API 验证配置
# ============================================================

# 可选：您自己的 Gemini API 密钥，用于测试找到的密钥
# 留空则跳过验证，直接保存所有找到的密钥
# 示例: GEMINI_API_KEY=AIzaSyABCDEF123456
GEMINI_API_KEY=

# 用于密钥验证的模型
# 可选值:
#   - gemini-2.0-flash-exp（最快）
#   - gemini-2.5-flash（平衡）
#   - gemini-1.5-flash（稳定）
#   - gemini-pro（功能最全）
# 示例: VALIDATION_MODEL=gemini-2.0-flash-exp
VALIDATION_MODEL=gemini-2.0-flash-exp

# 每个密钥验证尝试的超时时间（秒）
# 示例: VALIDATION_TIMEOUT=30
VALIDATION_TIMEOUT=30

# 每批验证的密钥数量
# 示例: VALIDATION_BATCH_SIZE=10
VALIDATION_BATCH_SIZE=10

# ============================================================
# 安全设置
# ============================================================

# 密钥存储方式
# 现在默认使用明文保存到TXT文件，日志中显示脱敏版本
# 示例: ALLOW_PLAINTEXT=true
ALLOW_PLAINTEXT=true  # 始终使用明文保存（简化系统）

# 此配置已废弃（系统已简化，不再使用HMAC加密）
# HMAC_SALT=not_used_anymore

# 日志和报告中的密钥脱敏设置
# 显示前 N 个字符和后 M 个字符（例如：AIzaSy...1co）
# 示例: MASK_PREFIX_LENGTH=6, MASK_SUFFIX_LENGTH=4
MASK_PREFIX_LENGTH=6
MASK_SUFFIX_LENGTH=4

# 文件权限设置（仅 Unix/Linux 系统）
# 0600 = 仅所有者可读写文件
# 0700 = 仅所有者可访问目录
# 示例: SECRETS_FILE_MODE=0600
SECRETS_FILE_MODE=0600
SECRETS_DIR_MODE=0700

# ============================================================
# 性能优化功能
# ============================================================

# 启用异步操作以提高性能
# 显著加快搜索和验证速度
# 示例: ENABLE_ASYNC=true
ENABLE_ASYNC=true

# 异步验证设置
# 同时处理多个密钥以加快验证速度
# 示例: ENABLE_ASYNC_VALIDATION=true
ENABLE_ASYNC_VALIDATION=true

# 异步验证并发数
# 根据 CPU 核心数调整，建议值为核心数 × 10
# 示例: ASYNC_VALIDATION_CONCURRENCY=100
ASYNC_VALIDATION_CONCURRENCY=100  # 增加到100个并发验证（充分利用资源）

# 异步验证批量大小
# 示例: ASYNC_VALIDATION_BATCH_SIZE=100
ASYNC_VALIDATION_BATCH_SIZE=100

# 网络请求连接池
# 重用连接以提高网络效率
# 示例: ENABLE_CONNECTION_POOL=true
ENABLE_CONNECTION_POOL=true

# 连接池大小
# 示例: CONNECTION_POOL_SIZE=50
CONNECTION_POOL_SIZE=50

# 连接超时时间（秒）
# 示例: CONNECTION_TIMEOUT=30
CONNECTION_TIMEOUT=30

# 连接重试次数
# 示例: CONNECTION_RETRIES=3
CONNECTION_RETRIES=3

# 并发操作限制
# 根据系统性能调整这些值
# 示例: MAX_CONCURRENT_SEARCHES=10
MAX_CONCURRENT_SEARCHES=10      # 增加到10个并发搜索（利用17个token）
MAX_CONCURRENT_VALIDATIONS=50   # 增加到50个并发验证
BATCH_SIZE=50                   # 增加批处理大小

# ============================================================
# 用户界面功能
# ============================================================

# 显示实时进度条和状态更新
# 有助于监控但会占用更多 CPU
# 示例: ENABLE_PROGRESS_DISPLAY=true
ENABLE_PROGRESS_DISPLAY=true

# 进度更新间隔（秒）
# 示例: PROGRESS_UPDATE_INTERVAL=0.1
PROGRESS_UPDATE_INTERVAL=0.1

# 进度刷新率
# 示例: PROGRESS_REFRESH_RATE=10
PROGRESS_REFRESH_RATE=10

# ============================================================
# 日志配置
# ============================================================

# 启用结构化日志（JSON 格式）
# 便于程序化解析日志
# 示例: ENABLE_STRUCTURED_LOGGING=false
ENABLE_STRUCTURED_LOGGING=false

# 日志格式
# 可选值: text（文本）, json（JSON格式）
# 示例: LOG_FORMAT=text
LOG_FORMAT=text

# 日志级别
# 可选值: DEBUG, INFO, WARNING, ERROR, CRITICAL
# 示例: LOG_LEVEL=INFO
LOG_LEVEL=INFO

# 日志文件路径
# 示例: LOG_FILE=logs/app.log
LOG_FILE=logs/app.log

# 详细日志模式
# 用于深度调试
# 示例: VERBOSE_LOGGING=false
VERBOSE_LOGGING=false

# ============================================================
# 数据存储
# ============================================================

# 启用数据库持久化存储
# 存储找到的密钥和搜索历史
# 示例: ENABLE_DATABASE=true
ENABLE_DATABASE=true

# 数据库类型
# 可选值: sqlite, postgresql, mysql
# 示例: DATABASE_TYPE=sqlite
DATABASE_TYPE=sqlite

# 数据库路径或连接字符串
# SQLite 示例: DATABASE_PATH=data/app.db
# PostgreSQL 示例: DATABASE_PATH=postgresql://user:pass@localhost/dbname
DATABASE_PATH=data/app.db

# 数据库连接池大小
# 示例: DATABASE_POOL_SIZE=10
DATABASE_POOL_SIZE=10

# 检查点设置，用于恢复中断的搜索
# 每处理 N 个项目保存一次进度
# 示例: CHECKPOINT_INTERVAL=20
CHECKPOINT_INTERVAL=20

# 保留的检查点数量
# 示例: CHECKPOINT_KEEP_COUNT=5
CHECKPOINT_KEEP_COUNT=5

# 运行 ID 格式，用于组织搜索结果
# 每次搜索创建一个带时间戳的目录
# 示例: RUN_ID_FORMAT="%Y%m%d_%H%M%S"
RUN_ID_FORMAT="%Y%m%d_%H%M%S"

# 创建指向最新运行的符号链接
# 示例: CREATE_LATEST_LINK=true
CREATE_LATEST_LINK=true

# ============================================================
# 外部同步服务（可选）
# ============================================================

# --- GPT Load Balancer 同步 ---
# 自动将找到的密钥同步到 GPT Load Balancer
# 项目地址: https://github.com/tbphp/gpt-load
# 示例: GPT_LOAD_SYNC_ENABLED=true
GPT_LOAD_SYNC_ENABLED=false

# GPT Load 服务地址
# 示例: GPT_LOAD_URL=http://localhost:8080
GPT_LOAD_URL=

# GPT Load 认证密钥
# 示例: GPT_LOAD_AUTH=your_auth_key
GPT_LOAD_AUTH=

# 智能分组 - 根据密钥类型自动分类
# 示例: GPT_LOAD_SMART_GROUP_ENABLED=true
GPT_LOAD_SMART_GROUP_ENABLED=false

# 各类型密钥的组名配置
# 示例: GPT_LOAD_GROUP_VALID=production
GPT_LOAD_GROUP_VALID=production
GPT_LOAD_GROUP_429=rate_limited
GPT_LOAD_GROUP_PAID=paid
GPT_LOAD_GROUP_FREE=free

# 将限流密钥作为备份发送到有效组
# 示例: GPT_LOAD_429_TO_VALID=true
GPT_LOAD_429_TO_VALID=true
GPT_LOAD_PAID_TO_VALID=true

# --- Gemini Balancer 同步 ---
# 项目地址: https://github.com/snailyp/gemini-balance
# 示例: GEMINI_BALANCER_SYNC_ENABLED=true
GEMINI_BALANCER_SYNC_ENABLED=false

# Gemini Balancer 服务地址
# 示例: GEMINI_BALANCER_URL=http://localhost:9090
GEMINI_BALANCER_URL=

# Gemini Balancer 认证密钥
# 示例: GEMINI_BALANCER_AUTH=your_auth_key
GEMINI_BALANCER_AUTH=

# ============================================================
# 高级功能
# ============================================================

# 插件系统，用于扩展功能
# 从插件目录加载自定义插件
# 示例: ENABLE_PLUGINS=true
ENABLE_PLUGINS=false

# 插件目录路径
# 示例: PLUGINS_DIR=plugins
PLUGINS_DIR=plugins

# 插件热重载
# 示例: PLUGINS_HOT_RELOAD=true
PLUGINS_HOT_RELOAD=false

# 系统监控和指标
# 提供健康检查和性能指标
# 示例: ENABLE_MONITORING=true
ENABLE_MONITORING=false

# 指标收集开关
# 示例: METRICS_ENABLED=true
METRICS_ENABLED=false

# 指标服务端口
# 示例: METRICS_PORT=9090
METRICS_PORT=9090

# 监控告警阈值
# 数据丢失告警
# 示例: ALERT_ON_DATA_LOSS=true
ALERT_ON_DATA_LOSS=true
ALERT_DATA_LOSS_THRESHOLD=0.5

# 错误率告警
# 示例: ALERT_ON_ERROR_RATE=true
ALERT_ON_ERROR_RATE=true
ALERT_ERROR_RATE_THRESHOLD=0.1

# Webhook 通知（完成或错误时）
# 示例: WEBHOOK_URL=https://hooks.slack.com/services/xxx
# WEBHOOK_URL=
# WEBHOOK_ON_SUCCESS=true
# WEBHOOK_ON_FAILURE=true

# ============================================================
# 优雅停机
# ============================================================

# 强制停机前等待任务完成的最大时间（秒）
# 示例: SHUTDOWN_TIMEOUT=30
SHUTDOWN_TIMEOUT=30

# 等待单个任务完成的时间（秒）
# 示例: TASK_WAIT_TIMEOUT=20
TASK_WAIT_TIMEOUT=20

# ============================================================
# 代理配置（可选）
# ============================================================

# 使用代理避免 IP 封锁
# 格式: http://用户名:密码@代理地址:端口 或 http://代理地址:端口
# 示例: HTTP_PROXY=http://localhost:1080
# HTTP_PROXY=
# HTTPS_PROXY=
# NO_PROXY=localhost,127.0.0.1

# ============================================================
# 开发与测试
# ============================================================

# 测试模式 - 跳过实际 API 调用
# 示例: TEST_MODE=false
TEST_MODE=false

# 使用模拟数据而非真实搜索
# 示例: USE_MOCK_DATA=false
USE_MOCK_DATA=false

# 启用性能分析
# 示例: ENABLE_PROFILING=false
ENABLE_PROFILING=false

# 性能分析输出目录
# 示例: PROFILE_OUTPUT=profiles/
PROFILE_OUTPUT=profiles/

# ============================================================
# 文件命名前缀（高级）
# ============================================================

# 不同类型密钥文件的前缀
# 示例: VALID_KEY_PREFIX=keys/keys_valid_
VALID_KEY_PREFIX=keys/keys_valid_
RATE_LIMITED_KEY_PREFIX=keys/key_429_
PAID_KEY_PREFIX=keys/keys_paid_
FREE_KEY_PREFIX=keys/keys_free_
KEYS_SEND_PREFIX=keys/keys_send_

# 日志文件前缀
# 示例: VALID_KEY_DETAIL_PREFIX=logs/keys_valid_detail_
VALID_KEY_DETAIL_PREFIX=logs/keys_valid_detail_
RATE_LIMITED_KEY_DETAIL_PREFIX=logs/key_429_detail_
KEYS_SEND_DETAIL_PREFIX=logs/keys_send_detail_

# 已扫描内容的跟踪文件
# 示例: SCANNED_SHAS_FILE=scanned_shas.txt
SCANNED_SHAS_FILE=scanned_shas.txt

# ============================================================
# 快速开始指南
# ============================================================
# 1. 复制配置文件: cp env.example .env
# 2. 添加 GitHub 令牌到 GITHUB_TOKENS 或 data/github_tokens.txt
# 3. (可选) 配置代理（如需要）
# 4. (可选) 添加 Gemini API 密钥用于验证
# 5. 运行应用程序: python app/main_v2.py
#
# 开发环境最佳性能配置:
# - 保持 ENABLE_ASYNC=true
# - 保持 ENABLE_CONNECTION_POOL=true
# - 除非排查问题，否则设置 DEBUG=false
# - 根据偏好设置 ENABLE_PROGRESS_DISPLAY
#
# 找到的密钥将保存在:
# - data/runs/{时间戳}/secrets/keys_valid_free.txt（免费版密钥）
# - data/runs/{时间戳}/secrets/keys_valid_paid.txt（付费版密钥）
# - data/runs/{时间戳}/secrets/keys_rate_limited.txt（可能有效）
# - data/runs/{时间戳}/secrets/keys_invalid.txt（无效密钥）
# ============================================================

# ============================================================
# 搜索查询示例（添加到 queries.txt）
# ============================================================
# AIzaSy in:file
# AIzaSy in:file extension:json
# AIzaSy in:file extension:env
# AIzaSy in:file filename:.env
# AIzaSy in:file filename:config
# gemini api key in:file
# GEMINI_API_KEY in:file
# google ai api in:file
# generativeai in:file extension:py
# ============================================================
