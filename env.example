# ====================================
# Hajimi King 配置文件模板
# ====================================
# 复制此文件为 .env 并填入您的配置
# cp env.example .env
# ====================================

# ====================================
# 🔴 必填配置
# ====================================

# GitHub访问令牌（必填）
# 多个token用逗号分隔，或在 data/github_tokens.txt 中配置（每行一个）
# 获取方式：https://github.com/settings/tokens (需要 public_repo 权限)
GITHUB_TOKENS=ghp_your_token_here_1,ghp_your_token_here_2,ghp_your_token_here_3

# ====================================
# 🟡 重要配置（建议配置）
# ==================================== 

# 代理配置（推荐使用，避免IP被封）
# 支持多个代理（逗号分隔）和账密认证
# 格式：http://user:pass@proxy:port 或 http://proxy:port
# 推荐方案：https://github.com/cmj2002/warp-docker
PROXY=http://localhost:1080

# 数据存储目录路径
DATA_PATH=/app/data

# 仓库年龄过滤（天数）
# 只扫描指定天数内更新的仓库，减少无效搜索
DATE_RANGE_DAYS=730

# 搜索查询配置文件路径
# 查询表达式是搜索效率的关键，需要发挥想象力
QUERIES_FILE=queries.txt

# 用于验证key有效性的Gemini模型
# 可选：gemini-2.5-flash, gemini-1.5-flash, gemini-pro
HAJIMI_CHECK_MODEL=gemini-2.5-flash

# ====================================
# 🔗 外部同步配置
# ====================================

# --- Gemini Balancer 同步配置 ---
# 项目地址：https://github.com/snailyp/gemini-balance
GEMINI_BALANCER_SYNC_ENABLED=false
GEMINI_BALANCER_URL=
GEMINI_BALANCER_AUTH=

# --- GPT Load Balancer 同步配置 ---
# 项目地址：https://github.com/tbphp/gpt-load
# 说明：有效密钥和429限流密钥都会被同步
GPT_LOAD_SYNC_ENABLED=false
GPT_LOAD_URL=
GPT_LOAD_AUTH=
# 支持多个组，用逗号分隔（传统模式使用）
GPT_LOAD_GROUP_NAME=production,staging,development

# --- GPT Load 智能分组配置（新功能）---
# 启用智能分组同步（根据密钥类型自动分配到不同组）
GPT_LOAD_SMART_GROUP_ENABLED=false

# 各类型密钥对应的组名配置
# 有效密钥组（包含所有验证通过的密钥）
GPT_LOAD_GROUP_VALID=production

# 429限流密钥专属组（可能是有效的）
GPT_LOAD_GROUP_429=rate_limited

# 付费版密钥专属组
GPT_LOAD_GROUP_PAID=paid

# 免费版密钥专属组
GPT_LOAD_GROUP_FREE=free

# 是否将429密钥也发送到valid组（双重保险）
GPT_LOAD_429_TO_VALID=true

# 是否将付费密钥也发送到valid组（确保可用性）
GPT_LOAD_PAID_TO_VALID=true

# ====================================
# 🟢 高级配置（保持默认即可）
# ====================================

# --- 文件命名配置 ---
# 有效密钥文件前缀
VALID_KEY_PREFIX=keys/keys_valid_

# 限流密钥文件前缀（429状态，可能是有效的）
RATE_LIMITED_KEY_PREFIX=keys/key_429_

# 付费版密钥文件前缀（新功能）
PAID_KEY_PREFIX=keys/keys_paid_

# 免费版密钥文件前缀（新功能）
FREE_KEY_PREFIX=keys/keys_free_

# 发送到外部应用的密钥文件前缀
KEYS_SEND_PREFIX=keys/keys_send_

# --- 日志配置 ---
# 有效密钥详细日志前缀
VALID_KEY_DETAIL_PREFIX=logs/keys_valid_detail_

# 限流密钥详细日志前缀
RATE_LIMITED_KEY_DETAIL_PREFIX=logs/key_429_detail_

# 发送结果详细日志前缀
KEYS_SEND_DETAIL_PREFIX=logs/keys_send_detail_

# --- 扫描配置 ---
# 已扫描文件SHA记录
SCANNED_SHAS_FILE=scanned_shas.txt

# 文件路径黑名单（逗号分隔）
# 过滤掉文档、示例、测试等无效文件
FILE_PATH_BLACKLIST=readme,docs,doc/,.md,example,sample,tutorial,test,spec,demo,mock,documentation,guide,manual

# --- 搜索性能配置 ---
# 最大并发搜索数
MAX_CONCURRENT_SEARCHES=5

# 最大并发验证数
MAX_CONCURRENT_VALIDATIONS=10

# 搜索请求间隔（秒）
SEARCH_DELAY=1

# 批量发送间隔（秒）
BATCH_SEND_INTERVAL=60

# --- Token管理配置（新功能）---
# GitHub Token文件路径（可选，优先级高于GITHUB_TOKENS）
GITHUB_TOKENS_FILE=data/github_tokens.txt

# Token轮换策略
# 可选：round_robin（轮询）, random（随机）, least_used（最少使用）
TOKEN_ROTATION_STRATEGY=round_robin

# Token额度检查间隔（秒）
TOKEN_CHECK_INTERVAL=300

# ====================================
# 📝 使用说明
# ====================================
# 1. 必须配置 GITHUB_TOKENS 或在 data/github_tokens.txt 中配置
# 2. 强烈建议配置 PROXY 避免IP被封
# 3. GPT_LOAD 和 GEMINI_BALANCER 可选配置
# 4. 429限流的密钥也会被保存和同步（很可能是有效的）
# 5. 付费版密钥会在程序退出时自动识别并分类保存
# 6. 智能分组功能可自动将不同类型密钥分配到专属组
# ====================================
#
# 🤖 智能分组说明：
# - 启用后，系统会自动识别密钥类型并分配到对应组
# - 429密钥 → rate_limited组（专门处理限流密钥）
# - 付费密钥 → paid组（优先级最高）
# - 免费密钥 → free组（普通优先级）
# - 可配置是否将特殊密钥也同步到主组（双重保险）
# ====================================

# ====================================
# 🔍 查询配置示例 (queries.txt)
# ====================================
# AIzaSy in:file
# AIzaSy in:file extension:json
# AIzaSy in:file extension:env
# gemini api key in:file
# GEMINI_API_KEY in:file
# google ai api in:file
# generativeai in:file extension:py
# ====================================

# ====================================
# 🧩 模块化功能配置
# ====================================

# --- 异步批量验证模块 ---
# 通过并发验证显著加快密钥验证速度（10倍性能提升）
# 启用异步验证功能，可显著提高密钥验证效率
ENABLE_ASYNC_VALIDATION=true
# 最大并发验证数，控制同时验证的密钥数量
# 增大：提高验证速度，但增加系统负载和API压力
# 减小：降低系统负载，但验证速度较慢
# 建议值：根据CPU核心数调整，一般为CPU核心数×10
MAX_CONCURRENT_VALIDATIONS=50
# 验证批次大小，控制每次批量验证的密钥数量
# 增大：减少网络请求次数，提高批量处理效率
# 减小：降低单次请求数据量，减少超时风险
# 建议值：50-200之间
VALIDATION_BATCH_SIZE=100
# 验证超时时间（秒），控制单次验证的最大等待时间
# 增大：给验证更多时间，减少超时错误
# 减小：快速失败，提高整体效率
# 建议值：15-60秒
VALIDATION_TIMEOUT=30
# 验证失败重试次数，控制验证失败后的重试次数
# 增大：提高验证成功率，但增加总耗时
# 减小：快速失败，减少无效重试
# 建议值：1-5次
VALIDATION_RETRIES=3

# --- 进度显示模块 ---
# 实时进度跟踪和可视化，提升用户体验
# 启用进度显示功能，提供实时进度反馈
ENABLE_PROGRESS_DISPLAY=true
# 进度更新间隔（秒），控制进度显示的刷新频率
# 增大：减少CPU使用率，但进度更新较慢
# 减小：更实时的进度反馈，但增加CPU负载
# 建议值：0.05-1.0秒
PROGRESS_UPDATE_INTERVAL=0.1
# 默认进度显示样式，可选：bar（进度条）、spinner（旋转器）、percentage（百分比）、eta（预计完成时间）
DEFAULT_PROGRESS_STYLE=bar
# 进度条宽度（字符数），控制进度条的显示长度
# 增大：更直观的进度显示
# 减小：节省显示空间
# 建议值：30-100字符
PROGRESS_BAR_WIDTH=50

# --- 结构化日志模块 ---
# 增强的JSON/XML/YAML日志格式，提供多种日志格式支持
# 启用结构化日志功能，提供多种日志格式支持
ENABLE_STRUCTURED_LOGGING=true
# 默认日志格式，可选：json、xml、yaml、text
DEFAULT_LOG_FORMAT=json
# 日志级别，可选：DEBUG、INFO、WARNING、ERROR、CRITICAL
# DEBUG：最详细日志，包含调试信息
# INFO：一般信息日志
# WARNING：警告信息
# ERROR：错误信息
# CRITICAL：严重错误信息
LOG_LEVEL=INFO
# 日志文件路径，指定日志文件的保存位置
LOG_FILE=logs/app.log
# 是否记录日志到文件，启用后日志会保存到指定文件
# 启用：完整日志记录，便于问题排查
# 禁用：减少磁盘I/O，提高性能
LOG_TO_FILE=true
# 是否输出日志到控制台，启用后日志会显示在控制台
# 启用：实时查看日志，便于调试
# 禁用：减少控制台输出，提高性能
LOG_TO_CONSOLE=true

# --- 连接池优化模块 ---
# 通过复用连接和智能池管理优化网络请求（50%网络性能提升）
# 启用连接池优化功能，提高网络请求效率
ENABLE_CONNECTION_POOL=true
# 最大连接数，控制连接池中最大连接数量
# 增大：提高并发处理能力，减少等待时间
# 减小：降低资源消耗，避免目标服务器限流
# 建议值：根据目标服务器并发限制调整
MAX_CONNECTIONS=100
# 连接超时时间（秒），控制建立连接的最大等待时间
# 增大：给连接更多时间，减少超时错误
# 减小：快速失败，提高响应速度
# 建议值：15-60秒
CONNECTION_TIMEOUT=30
# 连接重试次数，控制连接失败后的重试次数
# 增大：提高连接成功率，但增加总耗时
# 减小：快速失败，减少无效重试
# 建议值：1-5次
CONNECTION_RETRIES=3

# --- 数据库支持模块 ---
# 多后端数据持久化，支持SQLite、PostgreSQL、MySQL等数据库
# 启用数据库支持功能，实现数据持久化存储
ENABLE_DATABASE=true
# 数据库类型，可选：sqlite、postgresql、mysql
DATABASE_TYPE=sqlite
# 数据库名称/路径，指定数据库文件路径或连接字符串
DATABASE_NAME=data/app.db
# 数据库连接池大小，控制数据库连接池中连接数量
# 增大：提高数据库并发访问能力
# 减小：降低内存使用，避免数据库连接数限制
# 建议值：根据数据库服务器配置调整
DATABASE_POOL_SIZE=10

# --- 插件系统模块 ---
# 动态加载和热重载功能，支持插件的动态加载、卸载和热重载
# 启用插件系统功能，支持插件的动态加载和热重载
ENABLE_PLUGINS=true
# 插件目录，指定插件文件的存储目录
PLUGIN_DIRECTORY=plugins
# 是否启用插件热重载，启用后插件文件修改会自动重新加载
# 启用：开发调试更方便，插件修改后无需重启
# 禁用：减少文件系统检查开销，提高性能
PLUGIN_HOT_RELOAD=true
# 热重载检查间隔（秒），控制检查插件文件变化的频率
# 增大：减少文件系统检查频率，降低CPU使用率
# 减小：更快检测插件文件变化
# 建议值：1-30秒
PLUGIN_HOT_RELOAD_INTERVAL=5

# --- 监控告警模块 ---
# 系统健康和性能洞察，提供Prometheus指标收集和告警功能
# 启用监控功能，提供系统健康和性能监控
ENABLE_MONITORING=true
# 监控功能开关，控制监控功能是否启用
MONITORING_ENABLED=true
# 指标导出间隔（秒），控制指标数据导出的频率
# 增大：减少系统负载，但监控数据更新较慢
# 减小：更实时的监控数据，但增加系统负载
# 建议值：30-300秒
METRICS_EXPORT_INTERVAL=60
# 告警检查间隔（秒），控制告警条件检查的频率
# 增大：减少系统负载，但告警响应较慢
# 减小：更快的告警响应，但增加系统负载
# 建议值：10-60秒
ALERT_CHECK_INTERVAL=30
# 错误率阈值，当错误率超过此值时触发告警
# 增大：减少误报，但可能错过重要问题
# 减小：更敏感的告警，但可能产生误报
# 建议值：0.01-0.5（1%-50%）
ERROR_RATE_THRESHOLD=0.1
# 延迟阈值（秒），当平均响应时间超过此值时触发告警
# 增大：减少延迟告警，但可能错过性能问题
# 减小：更敏感的延迟告警，但可能产生误报
# 建议值：根据业务需求调整
LATENCY_THRESHOLD=5.0

# ====================================
# 🧪 模块化功能使用说明
# ====================================
# 1. 所有模块化功能都可以通过环境变量单独启用或禁用
# 2. 每个功能模块都有详细的配置选项，可以根据需要进行调整
# 3. 功能模块之间具有良好的兼容性，可以自由组合使用
# 4. 所有功能模块都实现了优雅降级，确保系统稳定性
# 5. 每个模块都有健康检查机制，可以实时监控运行状态
# ====================================
