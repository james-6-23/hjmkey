# HAJIMI KING V4.0 环境配置示例
# 复制此文件为 .env 并填写实际值

# ========== 基础配置 ==========
# 运行环境: development, production
ENVIRONMENT=development

# 日志级别: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# 日志格式: text, json
LOG_FORMAT=text

# 数据存储路径
DATA_PATH=./data

# ========== GitHub 配置 ==========
# GitHub 访问令牌（多个用逗号分隔）
GITHUB_TOKENS=

# 令牌池策略: ROUND_ROBIN, RANDOM, WEIGHTED, ADAPTIVE
TOKEN_POOL_STRATEGY=ADAPTIVE

# 默认搜索查询（每行一个）
DEFAULT_QUERIES=AIzaSy in:file
AIzaSy in:file filename:.env
AIzaSy in:file filename:config

# 最大循环次数（null 表示无限制）
MAX_LOOPS=1

# ========== 密钥验证配置 ==========
# Gemini API 密钥（用于验证找到的密钥）
GEMINI_API_KEY=your_gemini_api_key_here

# 验证模型
VALIDATION_MODEL=gemini-2.0-flash-exp

# 是否允许明文存储密钥
ALLOW_PLAINTEXT=true

# ========== 数据库配置 ==========
# 是否启用数据库
ENABLE_DATABASE=true

# 数据库类型: sqlite, postgresql, mysql
DATABASE_TYPE=sqlite

# 数据库连接字符串（SQLite 示例）
DATABASE_URL=sqlite:///./data/hajimi_king.db

# PostgreSQL 示例
# DATABASE_URL=postgresql://user:password@localhost:5432/hajimi_king

# MySQL 示例
# DATABASE_URL=mysql://user:password@localhost:3306/hajimi_king

# ========== 性能配置 ==========
# 是否启用异步处理
ENABLE_ASYNC=true

# 并发工作线程数（0 表示自动）
WORKER_COUNT=0

# 请求超时时间（秒）
REQUEST_TIMEOUT=30

# 重试次数
MAX_RETRIES=3

# ========== 监控配置 ==========
# 是否启用监控
ENABLE_MONITORING=false

# Prometheus 指标端口
METRICS_PORT=9090

# ========== V4 扩展搜索配置 ==========
# 是否启用扩展搜索
ENABLE_EXTENDED_SEARCH=true

# ========== Web 搜索配置 ==========
# 是否启用 Web 搜索
ENABLE_WEB_SEARCH=true

# Google 自定义搜索 API 密钥
GOOGLE_API_KEY=your_google_api_key_here

# Google 自定义搜索引擎 ID
GOOGLE_CSE_ID=your_cse_id_here

# Bing 搜索 API 密钥
BING_API_KEY=your_bing_api_key_here

# DuckDuckGo 搜索（无需 API 密钥）
ENABLE_DUCKDUCKGO=true

# Web 搜索结果数量
WEB_SEARCH_RESULTS=10

# ========== GitLab 搜索配置 ==========
# 是否启用 GitLab 搜索
ENABLE_GITLAB_SEARCH=true

# GitLab 访问令牌
GITLAB_TOKEN=your_gitlab_token_here

# GitLab 实例 URL（默认为 gitlab.com）
GITLAB_URL=https://gitlab.com

# 搜索的 GitLab 组/项目（逗号分隔）
GITLAB_GROUPS=group1,group2
GITLAB_PROJECTS=user/project1,user/project2

# ========== Docker Hub 搜索配置 ==========
# 是否启用 Docker Hub 搜索
ENABLE_DOCKER_SEARCH=true

# Docker Hub 访问令牌（可选，用于提高速率限制）
DOCKER_HUB_TOKEN=your_docker_hub_token_here

# Docker Hub 用户名（如果使用令牌）
DOCKER_HUB_USERNAME=your_username

# 搜索的 Docker 镜像数量
DOCKER_SEARCH_LIMIT=20

# ========== 缓存配置 ==========
# 是否启用缓存
ENABLE_CACHE=true

# 缓存过期时间（秒）
CACHE_TTL=3600

# 缓存大小限制（MB）
CACHE_SIZE_MB=100

# ========== 代理配置 ==========
# HTTP 代理
# HTTP_PROXY=http://proxy.example.com:8080

# HTTPS 代理
# HTTPS_PROXY=http://proxy.example.com:8080

# 不使用代理的地址
# NO_PROXY=localhost,127.0.0.1,.example.com

# ========== 高级配置 ==========
# 是否启用调试模式
DEBUG=false

# 是否启用性能分析
ENABLE_PROFILING=false

# 自定义用户代理
USER_AGENT=HAJIMI-KING/4.0 (+https://github.com/your-repo)

# 请求头
CUSTOM_HEADERS={"X-Custom-Header": "value"}

# ========== 安全配置 ==========
# 是否启用 SSL 验证
SSL_VERIFY=true

# 密钥加密密码（如果 ALLOW_PLAINTEXT=false）
ENCRYPTION_KEY=your_encryption_key_here

# 是否启用安全日志（自动脱敏）
SECURE_LOGGING=true

# ========== 通知配置 ==========
# 是否启用通知
ENABLE_NOTIFICATIONS=false

# Webhook URL（用于发送通知）
WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# 邮件通知配置
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_app_password
NOTIFICATION_EMAIL=admin@example.com

# ========== 特性开关 ==========
# 是否启用实验性功能
ENABLE_EXPERIMENTAL=false

# 是否启用 AI 增强搜索
ENABLE_AI_SEARCH=false

# 是否启用模式识别
ENABLE_PATTERN_RECOGNITION=true

# 是否启用自动报告生成
ENABLE_AUTO_REPORTS=true

# ========== 速率限制配置 ==========
# GitHub API 速率限制（每小时）
GITHUB_RATE_LIMIT=5000

# Web 搜索速率限制（每分钟）
WEB_SEARCH_RATE_LIMIT=100

# GitLab API 速率限制（每分钟）
GITLAB_RATE_LIMIT=300

# Docker Hub 速率限制（每 6 小时）
DOCKER_RATE_LIMIT=100